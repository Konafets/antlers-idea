{
    parserClass="de.arrobait.antlers.parser.AntlersParser"
    parserUtilClass="de.arrobait.antlers.parser.AntlersParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Antlers"
    psiImplClassSuffix="Impl"
    psiPackage="de.arrobait.antlers.psi"
    psiImplPackage="de.arrobait.antlers.psi.impl"

    elementTypeHolderClass="de.arrobait.antlers.psi.AntlersTypes"
    elementTypeClass="de.arrobait.antlers.psi.AntlersElementType"
    tokenTypeClass="de.arrobait.antlers.psi.AntlersTokenType"

    tokens = [
        T_COMMENT_OPEN='{{#'
        T_COMMENT_CLOSE='#}}'

        T_PHP_RAW_OPEN='{{?'
        T_PHP_RAW_CLOSE='?}}'

        T_PHP_ECHO_OPEN='{{$'
        T_PHP_ECHO_CLOSE='$}}'

        T_LD='{{'
        T_RD='}}'
        T_LP='('
        T_RP=')'
        T_LEFT_BRACE='{'
        T_RIGHT_BRACE='}'

        T_TRUE='true'
        T_FALSE='false'

        T_OP_ASSIGN='='

        T_INTEGER_NUMBER='regexp:0|[1-9]\d*'
        T_FLOAT_NUMBER='regexp:[0-9]*\.[0-9]+([eE][-+]?[0-9]+)?|[0-9]+[eE][-+]?[0-9]+'
    ]

    extends(".*expr")=expr
    extends(".*sub_expression")=expr
    extends(".*interpolated_statement")=expr
}

antlersFile ::= nodes*
private nodes ::= variable_assignment_node
                | antlers_node
                | comment_block
                | php_node
                | outer_content

// Comments: {{# Here be dragons #}}
comment_block ::= T_COMMENT_OPEN T_COMMENT_TEXT* T_COMMENT_CLOSE { pin=1 }

// HTML content
private outer_content ::= OUTER_CONTENT

// PHP expressions
private php_node ::= (php_raw_node | php_echo_node)
php_raw_node   ::= "{{?" T_PHP_CONTENT* "?}}" { pin=1 }
php_echo_node  ::= "{{$" T_PHP_CONTENT* "$}}" { pin=1 }

antlers_node ::= '{{' antlers_expression_or_statement  '}}' {
    pin=2
    recoverWhile=antlers_node_recover
}
private antlers_node_recover ::= !('{{' | outer_content | '{{#' | '{{?' | '{{$' | '{')

private antlers_expression_or_statement ::= expr

// Expressions
expr ::= interpolated_statement
       | group_primary

private group_primary ::= literal_expr | sub_expression

// Variable
variable ::= T_IDENTIFIER

// {{ total = 0 }}
// {{ todo = ['Get haircut', 'Bake bread', 'Eat soup'] }}
variable_assignment_node ::= '{{' variable '=' assignable_items '}}' { pin=3 }
private assignable_items ::= boolean_literal
                           | number_literal
                           | string_literal
                           | interpolated_statement
                           | sub_expression

// Basic
interpolated_statement ::= '{' (antlers_expression_or_statement | expr) '}' { pin=1 }
sub_expression ::= '(' (antlers_expression_or_statement | expr) ')' { pin=1 }
literal_expr ::= number_literal
                | boolean_literal
                | string_literal
                | variable

// Literals
number_literal  ::= T_INTEGER_NUMBER | T_FLOAT_NUMBER
string_literal  ::= T_STRING_START T_STRING_CONTENT* T_STRING_END
boolean_literal ::= 'true' | 'false'
