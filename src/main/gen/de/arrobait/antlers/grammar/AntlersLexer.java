/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.arrobait.antlers.grammar;

import de.arrobait.antlers.psi.AntlersTokenType;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.WHITE_SPACE;

import java.util.ArrayDeque;
import java.util.Deque;

import static de.arrobait.antlers.psi.AntlersTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AntlersLexer.flex</tt>
 */
public class AntlersLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANTLERS_COMMENT = 2;
  public static final int ANTLERS_NODE = 4;
  public static final int PROPERTY_ACCESS = 6;
  public static final int SINGLE_STRING = 8;
  public static final int DOUBLE_STRING = 10;
  public static final int PHP_ECHO = 12;
  public static final int PHP_RAW = 14;
  public static final int MODIFIER_LIST = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\5\1\22\0\1\1\1\71\1\10\1\6\1\47\1\70\1\64\1\7\1\72\1\73\1\67\1\61\1"+
    "\65\1\50\1\52\1\4\1\55\1\56\1\44\2\56\1\43\4\56\1\53\1\0\1\75\1\5\1\66\1\63"+
    "\1\62\4\51\1\60\25\51\1\54\1\0\1\74\1\0\1\13\1\0\1\11\1\27\1\26\1\12\1\17"+
    "\1\37\1\31\1\16\1\24\1\42\1\30\1\15\1\20\1\23\1\32\1\21\1\45\1\22\1\14\1\25"+
    "\1\33\1\40\1\35\1\41\1\36\1\34\1\2\1\46\1\3\7\0\1\1\32\0\1\1\77\0\12\57\46"+
    "\0\12\57\14\0\12\57\20\0\12\57\6\0\12\57\6\0\13\1\35\0\2\1\5\0\1\1\57\0\1"+
    "\1\26\0\12\57\16\0\62\57");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\10\0\1\1\1\2\1\3\1\4\3\3\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\13\14\1\15"+
    "\1\16\1\17\1\3\1\20\1\21\1\15\1\22\1\4"+
    "\1\23\1\3\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\14\1\15\1\36\1\15"+
    "\1\3\1\37\5\3\1\40\1\2\1\40\25\14\1\41"+
    "\1\40\1\42\3\0\1\43\1\44\2\0\1\45\1\46"+
    "\1\14\1\47\4\14\1\50\1\14\1\51\3\14\2\0"+
    "\1\51\1\52\1\53\1\0\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\0\1\66"+
    "\7\0\1\67\1\14\1\70\1\14\1\70\110\14\1\71"+
    "\1\72\1\73\1\0\1\74\1\75\1\0\1\76\1\57"+
    "\7\14\1\77\1\53\1\0\1\100\1\101\1\0\1\102"+
    "\1\0\1\103\1\70\51\14\1\70\5\14\1\70\42\14"+
    "\1\70\15\14\1\104\1\0\1\14\1\105\3\14\1\106"+
    "\2\14\1\107\77\14\1\106\35\14\1\0\2\14\1\75"+
    "\3\14\1\110\67\14\1\70\11\14\1\110\3\14\1\0"+
    "\1\111\1\112\2\14\1\113\63\14\1\70\1\14\1\114"+
    "\1\14\1\115\64\14\1\70\1\14\1\70\7\14\1\114"+
    "\20\14\1\70\41\14";

  private static int [] zzUnpackAction() {
    int [] result = new int[694];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u022e\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u0364\0\u03e0\0\u041e\0\u045c\0\u0364\0\u0364\0\u049a"+
    "\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u0364\0\u0364"+
    "\0\u083c\0\u087a\0\u0364\0\u08b8\0\u08f6\0\u0364\0\u0934\0\u0972"+
    "\0\u09b0\0\u09ee\0\u0364\0\u0364\0\u0364\0\u0a2c\0\u0364\0\u0a6a"+
    "\0\u0aa8\0\u0364\0\u0364\0\u0ae6\0\u0364\0\u0b24\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u0c1c\0\u0364\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52"+
    "\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42"+
    "\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132"+
    "\0\u1170\0\u11ae\0\u0364\0\u07fe\0\u11ec\0\u02e8\0\u122a\0\u1268"+
    "\0\u0364\0\u0364\0\u12a6\0\u12e4\0\u1322\0\u0364\0\u1360\0\u0364"+
    "\0\u139e\0\u13dc\0\u141a\0\u1458\0\u04d8\0\u1496\0\u04d8\0\u14d4"+
    "\0\u1512\0\u1550\0\u158e\0\u07fe\0\u0364\0\u0364\0\u15cc\0\u083c"+
    "\0\u0364\0\u0364\0\u0364\0\u0364\0\u0364\0\u0364\0\u0364\0\u0364"+
    "\0\u160a\0\u1648\0\u0ae6\0\u0364\0\u0b24\0\u0b62\0\u1686\0\u16c4"+
    "\0\u0bde\0\u1702\0\u1740\0\u0364\0\u177e\0\u17bc\0\u17fa\0\u0a6a"+
    "\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea"+
    "\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda"+
    "\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca"+
    "\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba"+
    "\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa"+
    "\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a"+
    "\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a"+
    "\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a"+
    "\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a"+
    "\0\u0364\0\u0364\0\u0364\0\u29a8\0\u0364\0\u0364\0\u29e6\0\u0364"+
    "\0\u04d8\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98"+
    "\0\u04d8\0\u2bd6\0\u2bd6\0\u0364\0\u0364\0\u2c14\0\u0364\0\u2c52"+
    "\0\u0364\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04"+
    "\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4"+
    "\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4"+
    "\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4"+
    "\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586\0\u35c4"+
    "\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4"+
    "\0\u37f2\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u3966\0\u39a4"+
    "\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u3b94"+
    "\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08\0\u3d46\0\u3d84"+
    "\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36\0\u3f74"+
    "\0\u3fb2\0\u3ff0\0\u402e\0\u406c\0\u40aa\0\u40e8\0\u4126\0\u4164"+
    "\0\u41a2\0\u41e0\0\u421e\0\u425c\0\u429a\0\u42d8\0\u4316\0\u4354"+
    "\0\u4392\0\u43d0\0\u0364\0\u440e\0\u444c\0\u448a\0\u44c8\0\u4506"+
    "\0\u4544\0\u04d8\0\u4582\0\u45c0\0\u0364\0\u45fe\0\u463c\0\u467a"+
    "\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u47b0\0\u47ee\0\u482c\0\u486a"+
    "\0\u48a8\0\u48e6\0\u4924\0\u4962\0\u49a0\0\u49de\0\u4a1c\0\u4a5a"+
    "\0\u4a98\0\u4ad6\0\u4b14\0\u4b52\0\u4b90\0\u4bce\0\u4c0c\0\u4c4a"+
    "\0\u4c88\0\u4cc6\0\u4d04\0\u4d42\0\u4d80\0\u4dbe\0\u4dfc\0\u4e3a"+
    "\0\u4e78\0\u4eb6\0\u4ef4\0\u4f32\0\u4f70\0\u4fae\0\u4fec\0\u502a"+
    "\0\u5068\0\u50a6\0\u50e4\0\u5122\0\u5160\0\u519e\0\u51dc\0\u521a"+
    "\0\u5258\0\u5296\0\u52d4\0\u5312\0\u5350\0\u538e\0\u53cc\0\u540a"+
    "\0\u5448\0\u5486\0\u54c4\0\u5502\0\u0a6a\0\u5540\0\u557e\0\u55bc"+
    "\0\u55fa\0\u5638\0\u5676\0\u56b4\0\u56f2\0\u5730\0\u576e\0\u57ac"+
    "\0\u57ea\0\u5828\0\u5866\0\u58a4\0\u58e2\0\u5920\0\u595e\0\u599c"+
    "\0\u59da\0\u5a18\0\u5a56\0\u5a94\0\u5ad2\0\u5b10\0\u5b4e\0\u5b8c"+
    "\0\u5bca\0\u5c08\0\u5c46\0\u5c84\0\u5cc2\0\u04d8\0\u5d00\0\u5d3e"+
    "\0\u5d7c\0\u04d8\0\u5dba\0\u5df8\0\u5e36\0\u5e74\0\u5eb2\0\u5ef0"+
    "\0\u5f2e\0\u5f6c\0\u5faa\0\u5fe8\0\u6026\0\u6064\0\u60a2\0\u60e0"+
    "\0\u611e\0\u615c\0\u619a\0\u61d8\0\u6216\0\u6254\0\u6292\0\u62d0"+
    "\0\u630e\0\u634c\0\u638a\0\u63c8\0\u6406\0\u6444\0\u6482\0\u64c0"+
    "\0\u64fe\0\u653c\0\u657a\0\u65b8\0\u65f6\0\u6634\0\u6672\0\u66b0"+
    "\0\u66ee\0\u672c\0\u676a\0\u67a8\0\u67e6\0\u6824\0\u6862\0\u68a0"+
    "\0\u68de\0\u691c\0\u695a\0\u6998\0\u69d6\0\u6a14\0\u6a52\0\u6a90"+
    "\0\u6ace\0\u6b0c\0\u6b4a\0\u6b88\0\u6bc6\0\u6c04\0\u6c42\0\u6c80"+
    "\0\u6cbe\0\u6cfc\0\u6d3a\0\u0a6a\0\u6d78\0\u6db6\0\u6df4\0\u6e32"+
    "\0\u04d8\0\u04d8\0\u6e70\0\u6eae\0\u04d8\0\u6eec\0\u6f2a\0\u6f68"+
    "\0\u6fa6\0\u6fe4\0\u7022\0\u7060\0\u709e\0\u70dc\0\u711a\0\u7158"+
    "\0\u7196\0\u71d4\0\u7212\0\u7250\0\u728e\0\u72cc\0\u730a\0\u7348"+
    "\0\u7386\0\u73c4\0\u7402\0\u7440\0\u747e\0\u74bc\0\u74fa\0\u7538"+
    "\0\u7576\0\u75b4\0\u75f2\0\u7630\0\u766e\0\u76ac\0\u76ea\0\u7728"+
    "\0\u7766\0\u77a4\0\u77e2\0\u7820\0\u785e\0\u789c\0\u78da\0\u7918"+
    "\0\u7956\0\u7994\0\u79d2\0\u7a10\0\u7a4e\0\u7a8c\0\u7aca\0\u7b08"+
    "\0\u7b46\0\u7b84\0\u0364\0\u7bc2\0\u04d8\0\u7c00\0\u7c3e\0\u7c7c"+
    "\0\u7cba\0\u7cf8\0\u7d36\0\u7d74\0\u7db2\0\u7df0\0\u7e2e\0\u7e6c"+
    "\0\u7eaa\0\u7ee8\0\u7f26\0\u7f64\0\u7fa2\0\u7fe0\0\u801e\0\u805c"+
    "\0\u809a\0\u80d8\0\u8116\0\u8154\0\u8192\0\u81d0\0\u820e\0\u824c"+
    "\0\u828a\0\u82c8\0\u8306\0\u8344\0\u8382\0\u83c0\0\u83fe\0\u843c"+
    "\0\u847a\0\u84b8\0\u84f6\0\u8534\0\u8572\0\u85b0\0\u85ee\0\u862c"+
    "\0\u866a\0\u86a8\0\u86e6\0\u8724\0\u8762\0\u87a0\0\u87de\0\u881c"+
    "\0\u885a\0\u8898\0\u88d6\0\u8914\0\u8952\0\u8990\0\u89ce\0\u8a0c"+
    "\0\u8a4a\0\u8a88\0\u8ac6\0\u04d8\0\u8b04\0\u8b42\0\u8b80\0\u8bbe"+
    "\0\u8bfc\0\u8c3a\0\u8c78\0\u8cb6\0\u8cf4\0\u8d32\0\u8d70\0\u8dae"+
    "\0\u8dec\0\u8e2a\0\u8e68\0\u8ea6\0\u8ee4\0\u8f22\0\u8f60\0\u8f9e"+
    "\0\u8fdc\0\u901a\0\u9058\0\u9096\0\u90d4\0\u9112\0\u9150\0\u918e"+
    "\0\u91cc\0\u920a\0\u9248\0\u9286\0\u92c4\0\u9302\0\u9340\0\u937e"+
    "\0\u93bc\0\u93fa\0\u9438\0\u9476\0\u94b4\0\u94f2\0\u9530\0\u956e"+
    "\0\u95ac\0\u95ea\0\u9628\0\u9666\0\u96a4\0\u96e2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[694];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\57\12\1\15\13\12\6\16\1\17"+
    "\67\16\1\20\1\21\1\22\1\23\1\24\1\25\1\20"+
    "\1\26\1\27\1\30\2\31\1\32\2\31\1\33\3\31"+
    "\1\34\1\35\1\36\4\31\1\37\1\40\3\31\1\41"+
    "\1\31\1\42\1\31\2\43\1\31\1\44\1\31\1\45"+
    "\1\31\1\46\1\47\1\50\1\51\1\43\1\20\1\31"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\7\67\1\26\1\27"+
    "\32\70\2\71\1\70\1\67\1\70\1\67\1\70\1\72"+
    "\1\47\1\50\1\73\1\71\1\67\1\70\13\67\1\65"+
    "\1\67\7\74\1\75\66\74\10\76\1\75\65\76\47\77"+
    "\1\100\26\77\63\101\1\102\12\101\1\103\1\104\1\103"+
    "\1\105\3\103\1\26\1\27\1\106\1\107\1\70\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\70\1\124\1\125\1\126\1\70"+
    "\1\127\1\130\1\131\2\70\1\132\2\43\1\70\1\133"+
    "\1\70\1\103\1\70\1\134\1\103\1\50\1\51\1\43"+
    "\1\103\1\70\4\103\1\56\4\103\1\63\1\64\1\65"+
    "\1\103\2\12\1\0\74\12\1\13\1\0\73\12\2\0"+
    "\1\135\73\0\6\136\1\137\72\136\1\140\2\136\1\137"+
    "\67\136\77\0\1\21\77\0\1\141\77\0\1\142\16\0"+
    "\1\143\6\0\1\144\47\0\1\145\60\0\1\146\20\0"+
    "\12\31\1\147\22\31\2\0\2\31\3\150\2\31\1\0"+
    "\1\31\26\0\35\31\2\0\2\31\3\150\2\31\1\0"+
    "\1\31\26\0\24\31\1\151\10\31\2\0\2\31\3\150"+
    "\2\31\1\0\1\31\26\0\4\31\1\152\5\31\1\153"+
    "\22\31\2\0\2\31\3\150\2\31\1\0\1\31\26\0"+
    "\21\31\1\154\13\31\2\0\2\31\3\150\2\31\1\0"+
    "\1\31\26\0\26\31\1\155\6\31\2\0\2\31\3\150"+
    "\2\31\1\0\1\31\26\0\11\31\1\156\23\31\2\0"+
    "\2\31\3\150\2\31\1\0\1\31\26\0\11\31\1\157"+
    "\23\31\2\0\2\31\3\150\2\31\1\0\1\31\26\0"+
    "\12\31\1\160\22\31\2\0\2\31\3\150\2\31\1\0"+
    "\1\31\26\0\1\161\34\31\2\0\2\31\3\150\2\31"+
    "\1\0\1\31\26\0\21\31\1\162\13\31\2\0\2\31"+
    "\3\150\2\31\1\0\1\31\34\0\1\163\23\0\2\43"+
    "\5\0\1\164\2\0\2\43\1\71\1\163\63\0\1\165"+
    "\34\0\1\166\133\0\2\167\10\0\2\167\36\0\1\163"+
    "\23\0\2\170\5\0\1\164\2\0\2\170\1\0\1\163"+
    "\22\0\1\171\75\0\1\172\55\0\1\173\76\0\1\174"+
    "\16\0\1\175\75\0\1\176\61\0\1\177\13\0\1\200"+
    "\75\0\1\201\75\0\1\202\101\0\35\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\60\0\2\71\10\0\3\71"+
    "\16\0\7\203\1\204\66\203\10\205\1\204\65\205\47\206"+
    "\1\207\31\206\1\210\43\206\1\207\26\206\63\211\1\212"+
    "\15\211\1\213\57\211\1\212\12\211\1\0\1\104\77\0"+
    "\1\214\103\0\1\70\1\215\1\70\1\216\3\70\1\217"+
    "\4\70\1\220\20\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\1\221\3\70\1\220\1\70\1\222\4\70"+
    "\1\223\6\70\1\224\12\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\1\225\3\70\1\226\1\227\1\230"+
    "\1\231\1\232\2\70\1\233\1\234\4\70\1\235\1\236"+
    "\1\70\1\237\10\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\1\240\5\70\1\241\4\70\1\242\1\70"+
    "\1\243\3\70\1\244\13\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\1\245\20\70\1\246\13\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\7\70\1\247"+
    "\2\70\1\250\15\70\1\251\4\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\1\252\1\253\4\70\1\254"+
    "\4\70\1\255\5\70\1\256\1\257\12\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\1\260\3\70\1\261"+
    "\6\70\1\262\21\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\1\263\5\70\1\264\12\70\1\265\13\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\4\70"+
    "\1\266\30\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\3\70\1\267\3\70\1\270\2\70\1\271\22\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\1\272"+
    "\10\70\1\273\1\70\1\274\5\70\1\275\13\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\1\276\1\277"+
    "\3\70\1\300\1\301\12\70\1\302\13\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\1\303\34\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\6\70\1\304"+
    "\2\70\1\305\23\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\4\70\1\220\3\70\1\306\5\70\1\307"+
    "\3\70\1\310\3\70\1\311\6\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\4\70\1\220\3\70\1\312"+
    "\1\313\1\314\2\70\1\243\17\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\5\70\1\315\1\316\2\70"+
    "\1\317\1\70\1\320\5\70\1\321\13\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\6\70\1\322\26\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\1\323"+
    "\3\70\1\324\6\70\1\325\5\70\1\326\1\327\12\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\21\70"+
    "\1\330\13\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\23\0\1\331\40\0\1\332\13\0\1\333\12\0\3\136"+
    "\1\334\2\136\1\137\72\136\1\335\2\136\1\137\67\136"+
    "\37\0\1\336\61\0\1\337\57\0\1\340\101\0\1\31"+
    "\1\341\33\31\2\0\2\31\3\150\2\31\1\0\1\31"+
    "\26\0\13\31\1\342\21\31\2\0\2\31\3\150\2\31"+
    "\1\0\1\31\26\0\3\31\1\343\31\31\2\0\2\31"+
    "\3\150\2\31\1\0\1\31\26\0\1\31\1\344\33\31"+
    "\2\0\2\31\3\150\2\31\1\0\1\31\26\0\10\31"+
    "\1\345\24\31\2\0\2\31\3\150\2\31\1\0\1\31"+
    "\26\0\22\31\1\346\12\31\2\0\2\31\3\150\2\31"+
    "\1\0\1\31\26\0\4\31\1\347\30\31\2\0\2\31"+
    "\3\150\2\31\1\0\1\31\26\0\4\31\1\350\30\31"+
    "\2\0\2\31\3\150\2\31\1\0\1\31\26\0\11\31"+
    "\1\351\23\31\2\0\2\31\3\150\2\31\1\0\1\31"+
    "\60\0\2\352\3\0\1\353\4\0\2\352\2\0\1\353"+
    "\33\0\1\163\23\0\2\167\10\0\2\167\1\0\1\163"+
    "\22\0\1\354\156\0\1\355\7\0\3\206\1\356\43\206"+
    "\1\207\31\206\1\357\43\206\1\207\26\206\3\211\1\360"+
    "\57\211\1\212\15\211\1\361\57\211\1\212\12\211\11\0"+
    "\1\70\1\362\33\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\15\70\1\363\17\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\10\70\1\364\24\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\3\70\1\365"+
    "\21\70\1\366\7\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\3\70\1\367\11\70\1\370\17\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\27\70\1\371"+
    "\5\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\7\70\1\372\25\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\12\70\1\373\13\70\1\374\6\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\22\70\1\375"+
    "\12\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\22\70\1\376\12\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\12\70\1\377\2\70\1\u0100\2\70\1\u0101"+
    "\14\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\1\u0102\34\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\1\u0103\34\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\12\70\1\u0104\22\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\1\u0105\10\70\1\u0106\23\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\11\70"+
    "\1\304\23\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\7\70\1\220\1\70\1\u0107\4\70\1\u0108\16\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\1\u0109"+
    "\34\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\3\70\1\304\31\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\12\70\1\u010a\22\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\3\70\1\304\3\70\1\u010b"+
    "\2\70\1\u010c\22\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\26\70\1\u010d\6\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\24\70\1\u010e\10\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\3\70\1\u010f"+
    "\31\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\22\70\1\u0110\12\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\16\70\1\u0111\16\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\1\70\1\u0112\1\70\1\u0113"+
    "\10\70\1\u0114\20\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\10\70\1\u0115\4\70\1\u0116\17\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\11\70\1\u0117"+
    "\1\70\1\u0118\1\70\1\u0119\17\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\32\70\1\220\2\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\11\70\1\u011a"+
    "\23\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\12\70\1\u011b\22\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\1\70\1\u011c\10\70\1\u011d\22\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\4\70\1\u011e"+
    "\30\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\1\70\1\220\7\70\1\u011f\23\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\22\70\1\u0120\12\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\10\70\1\u0121"+
    "\24\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\24\70\1\u0122\1\220\7\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\1\u0123\3\70\1\u0124\2\70\1\u0125"+
    "\1\u0126\7\70\1\u0127\6\70\1\u0128\5\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\22\70\1\u0129\12\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\33\70"+
    "\1\u012a\1\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\2\70\1\u012b\16\70\1\u012c\13\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\1\u011a\34\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\2\70\1\u012d"+
    "\1\u012e\31\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\16\70\1\u012f\16\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\1\u0130\12\70\1\u0131\6\70\1\u0132"+
    "\12\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\1\70\1\u0133\5\70\1\u0134\4\70\1\u012f\20\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\2\70\1\u0135"+
    "\32\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\7\70\1\u0136\25\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\1\u0137\34\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\22\70\1\u0138\12\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\13\70\1\u0139\21\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\4\70"+
    "\1\u013a\2\70\1\u013b\2\70\1\u013c\7\70\1\u013d\12\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\15\70"+
    "\1\u013e\17\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\14\70\1\220\20\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\1\u013f\20\70\1\u0140\13\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\14\70\1\u0141"+
    "\20\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\26\70\1\u0142\6\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\14\70\1\u0143\20\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\26\70\1\u0144\6\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\10\70\1\u010e"+
    "\24\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\4\70\1\u0145\30\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\1\70\1\u0146\11\70\1\u0147\21\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\6\70\1\u0148"+
    "\26\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\6\70\1\u0149\26\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\1\372\34\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\1\70\1\u014a\33\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\11\70\1\u014b\23\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\1\u0110"+
    "\34\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\4\70\1\u014c\22\70\1\u014d\5\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\1\u014e\12\70\1\372\5\70"+
    "\1\u014f\13\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\11\70\1\240\23\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\11\70\1\u0150\23\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\4\70\1\u0151\30\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\13\70"+
    "\1\u0152\21\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\15\0\3\136\1\u0153\2\136\1\137\67\136\15\0\1\u0154"+
    "\71\0\14\31\1\u0155\20\31\2\0\2\31\3\150\2\31"+
    "\1\0\1\31\26\0\6\31\1\u0156\26\31\2\0\2\31"+
    "\3\150\2\31\1\0\1\31\26\0\13\31\1\u0157\6\31"+
    "\1\u0158\12\31\2\0\2\31\3\150\2\31\1\0\1\31"+
    "\26\0\1\u0159\34\31\2\0\2\31\3\150\2\31\1\0"+
    "\1\31\26\0\6\31\1\u015a\26\31\2\0\2\31\3\150"+
    "\2\31\1\0\1\31\26\0\6\31\1\u015b\26\31\2\0"+
    "\2\31\3\150\2\31\1\0\1\31\26\0\3\31\1\u015c"+
    "\31\31\2\0\2\31\3\150\2\31\1\0\1\31\60\0"+
    "\2\352\10\0\2\352\17\0\3\206\1\u015d\43\206\1\207"+
    "\26\206\3\211\1\u015d\57\211\1\212\12\211\11\0\2\70"+
    "\1\u015e\32\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\13\70\1\u015f\21\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\6\70\1\u0160\26\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\5\70\1\u0161\27\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\3\70"+
    "\1\u0162\31\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\4\70\1\226\30\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\21\70\1\u0163\13\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\13\70\1\u0163\21\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\10\70"+
    "\1\220\24\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\13\70\1\u0164\21\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\6\70\1\u0165\26\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\20\70\1\u0161\14\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\26\70"+
    "\1\u0166\6\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\14\70\1\u0167\20\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\21\70\1\u0168\13\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\7\70\1\u0169\25\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\11\70"+
    "\1\u016a\23\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\15\70\1\u016b\17\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\20\70\1\u016c\14\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\11\70\1\u016d\23\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\13\70"+
    "\1\u016e\21\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\11\70\1\u016f\23\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\3\70\1\u0170\10\70\1\u0171\20\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\10\70"+
    "\1\u0172\24\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\20\70\1\u0173\14\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\13\70\1\304\21\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\17\70\1\220\15\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\13\70"+
    "\1\325\21\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\6\70\1\u0174\26\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\2\70\1\u0175\32\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\11\70\1\366\23\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\6\70"+
    "\1\u0176\26\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\3\70\1\u0177\31\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\22\70\1\u0178\12\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\13\70\1\u0179\21\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\4\70"+
    "\1\370\30\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\6\70\1\u017a\26\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\17\70\1\u017b\15\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\4\70\1\u017c\30\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\11\70"+
    "\1\u017d\23\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\20\70\1\u017e\14\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\22\70\1\u017f\12\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\13\70\1\u0180\21\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\14\70"+
    "\1\u0181\20\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\14\70\1\u0182\20\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\14\70\1\u0183\20\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\11\70\1\u0184\23\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\6\70"+
    "\1\u0185\26\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\22\70\1\u0186\12\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\1\70\1\u0187\33\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\1\u0188\34\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\21\70\1\u0189"+
    "\13\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\4\70\1\u018a\1\70\1\u018b\26\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\6\70\1\u018c\26\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\6\70\1\u018d"+
    "\26\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\12\70\1\u0185\22\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\16\70\1\u0174\16\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\1\u018e\3\70\1\u018f\1\70"+
    "\1\u0190\1\70\1\u0191\1\70\1\u0192\1\70\1\u0193\1\70"+
    "\1\u0194\3\70\1\u0195\1\70\1\u0196\1\u0197\1\u0198\2\70"+
    "\1\u0199\3\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\2\70\1\u019a\32\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\1\u019b\34\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\6\70\1\235\26\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\4\70\1\u017e"+
    "\30\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\12\70\1\u019c\22\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\7\70\1\220\25\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\6\70\1\u019d\3\70\1\u019e"+
    "\22\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\25\70\1\220\7\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\6\70\1\u019f\26\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\3\70\1\u01a0\10\70\1\u01a1"+
    "\14\70\1\u0199\3\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\6\70\1\u01a2\26\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\14\70\1\u01a3\20\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\12\70\1\u010c"+
    "\22\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\4\70\1\220\30\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\4\70\1\u01a4\30\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\10\70\1\u01a5\24\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\3\70\1\u01a6"+
    "\10\70\1\u01a7\20\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\12\70\1\u01a8\22\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\17\70\1\u01a9\15\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\27\70\1\u01aa"+
    "\5\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\22\70\1\u01ab\12\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\13\70\1\u01ac\21\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\22\70\1\u01ad\12\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\10\70\1\u01ae"+
    "\24\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\3\70\1\u01af\31\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\1\70\1\u01b0\4\70\1\u01b1\26\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\6\70\1\u01b2"+
    "\26\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\34\70\1\u01b3\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\11\70\1\u017e\23\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\17\70\1\366\15\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\21\70\1\u01b4\13\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\1\70"+
    "\1\u01b5\33\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\3\70\1\u01b6\31\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\13\70\1\u01b7\21\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\14\70\1\u01b8\20\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\21\70"+
    "\1\u0174\13\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\7\70\1\u01b9\25\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\4\70\1\u01ba\30\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\12\70\1\220\22\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\34\0\1\u01bb"+
    "\67\0\15\31\1\u01bc\17\31\2\0\2\31\3\150\2\31"+
    "\1\0\1\31\26\0\13\31\1\u01bd\21\31\2\0\2\31"+
    "\3\150\2\31\1\0\1\31\26\0\26\31\1\u01be\6\31"+
    "\2\0\2\31\3\150\2\31\1\0\1\31\26\0\12\31"+
    "\1\u01bf\22\31\2\0\2\31\3\150\2\31\1\0\1\31"+
    "\26\0\11\31\1\u01c0\23\31\2\0\2\31\3\150\2\31"+
    "\1\0\1\31\26\0\3\31\1\u01c1\31\31\2\0\2\31"+
    "\3\150\2\31\1\0\1\31\26\0\6\31\1\u01c2\26\31"+
    "\2\0\2\31\3\150\2\31\1\0\1\31\26\0\3\70"+
    "\1\u01c3\31\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\13\70\1\220\21\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\11\70\1\u01c4\23\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\13\70\1\u01c5\21\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\2\70"+
    "\1\u01c6\32\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\1\70\1\u017e\33\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\14\70\1\u01c7\20\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\2\70\1\u01c8\32\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\26\70"+
    "\1\u012f\6\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\6\70\1\u01c9\26\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\12\70\1\u01ca\22\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\6\70\1\u01b4\26\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\14\70"+
    "\1\u01cb\20\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\6\70\1\u01cc\26\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\22\70\1\u01cd\12\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\14\70\1\u0112\20\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\10\70"+
    "\1\u01ce\24\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\21\70\1\265\13\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\14\70\1\u0174\20\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\11\70\1\u01a5\23\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\2\70"+
    "\1\u01cf\32\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\14\70\1\u01d0\20\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\11\70\1\220\23\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\4\70\1\u01d1\15\70"+
    "\1\u01d2\12\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\1\70\1\u01d3\33\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\2\70\1\u01d4\32\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\11\70\1\u01d5\23\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\14\70"+
    "\1\u01d6\20\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\11\70\1\u01d7\23\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\1\70\1\u01d8\33\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\14\70\1\u017d\20\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\21\70"+
    "\1\220\13\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\6\70\1\220\26\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\14\70\1\u01d9\20\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\26\70\1\u01da\6\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\5\70"+
    "\1\366\27\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\13\70\1\u01db\21\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\13\70\1\u0184\21\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\1\u0139\34\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\1\70\1\220"+
    "\33\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\11\70\1\u01dc\23\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\2\70\1\u01dd\32\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\14\70\1\u01de\20\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\27\70\1\u01d5"+
    "\5\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\1\u01df\34\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\1\304\34\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\30\70\1\u01e0\4\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\11\70\1\u01e1\23\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\4\70\1\u01e2"+
    "\21\70\1\u01e3\6\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\6\70\1\u01e4\12\70\1\u01e5\13\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\7\70\1\u01e6"+
    "\25\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\1\240\34\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\22\70\1\u01e7\12\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\21\70\1\u01e8\13\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\4\70\1\u01e9\1\70"+
    "\1\u01ea\26\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\10\70\1\u01eb\1\u0139\23\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\6\70\1\u01ec\26\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\6\70\1\u01ed"+
    "\26\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\22\70\1\u01ee\12\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\3\70\1\u01ef\31\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\26\70\1\u01f0\6\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\11\70\1\u01f1"+
    "\23\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\3\70\1\220\31\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\15\70\1\u01f2\17\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\23\70\1\u01f3\11\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\10\70\1\u01f4"+
    "\24\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\1\u01f5\34\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\4\70\1\u01c7\30\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\1\220\34\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\1\u01f6\34\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\1\u01f7\34\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\21\70\1\u01f8"+
    "\13\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\1\u01f9\34\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\14\70\1\u01fa\20\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\3\70\1\u01fb\14\70\1\u01fc\14\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\1\u01fd"+
    "\34\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\10\70\1\u01fe\24\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\21\70\1\u01ff\13\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\3\70\1\u0200\31\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\22\70\1\304"+
    "\12\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\6\70\1\304\26\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\6\70\1\u0201\26\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\12\70\1\u0201\22\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\11\70\1\u0202"+
    "\23\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\22\70\1\u017e\12\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\12\70\1\304\22\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\2\70\1\u0203\32\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\6\70\1\u0204"+
    "\26\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\15\70\1\u01ef\17\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\14\70\1\u0205\20\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\1\u0206\34\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\2\70\1\u0207\32\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\31\0\1\u0208"+
    "\72\0\5\31\1\u0209\27\31\2\0\2\31\3\150\2\31"+
    "\1\0\1\31\26\0\26\31\1\u020a\6\31\2\0\2\31"+
    "\3\150\2\31\1\0\1\31\26\0\4\31\1\u020b\30\31"+
    "\2\0\2\31\3\150\2\31\1\0\1\31\26\0\3\31"+
    "\1\u020c\31\31\2\0\2\31\3\150\2\31\1\0\1\31"+
    "\26\0\3\31\1\u020d\31\31\2\0\2\31\3\150\2\31"+
    "\1\0\1\31\26\0\4\70\1\u020e\30\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\3\70\1\u020f\31\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\26\70"+
    "\1\u0133\6\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\1\u0210\34\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\13\70\1\u0211\21\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\14\70\1\u0212\20\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\12\70\1\u0213"+
    "\22\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\1\70\1\366\33\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\25\70\1\u0214\7\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\4\70\1\u0215\30\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\4\70\1\u0216"+
    "\30\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\2\70\1\u0217\32\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\15\70\1\u0218\17\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\5\70\1\220\27\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\21\70\1\u0219"+
    "\13\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\10\70\1\u021a\24\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\2\70\1\u021b\32\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\24\70\1\u021c\10\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\6\70\1\u021d"+
    "\26\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\13\70\1\u021e\21\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\10\70\1\304\24\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\21\70\1\u021f\13\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\6\70\1\366"+
    "\26\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\25\70\1\u0220\7\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\10\70\1\u0221\24\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\4\70\1\u0222\30\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\14\70\1\u0223"+
    "\20\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\13\70\1\u0224\21\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\15\70\1\u017e\17\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\2\70\1\u0225\32\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\3\70\1\u017e"+
    "\31\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\10\70\1\u0226\24\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\14\70\1\u010e\20\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\1\u0227\34\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\24\70\1\u0228\10\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\1\301"+
    "\7\70\1\u0229\5\70\1\u022a\16\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\7\70\1\u022b\25\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\1\70\1\u022c"+
    "\5\70\1\u022d\25\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\1\u0138\34\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\14\70\1\u022e\11\70\1\u022f\6\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\10\70"+
    "\1\u0228\24\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\6\70\1\u0230\26\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\3\70\1\u0231\31\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\14\70\1\u0232\20\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\21\70"+
    "\1\u0152\13\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\21\70\1\u0233\13\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\11\70\1\u022c\23\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\1\u0234\34\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\21\70\1\u0235"+
    "\13\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\1\u0236\34\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\16\70\1\u019c\16\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\10\70\1\u0237\24\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\15\70\1\304\17\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\4\70"+
    "\1\u0238\30\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\13\70\1\u0239\21\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\2\70\1\u023a\32\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\10\70\1\u018a\24\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\11\70"+
    "\1\u023b\23\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\14\70\1\u0216\20\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\2\70\1\u023c\32\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\12\70\1\u023d\22\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\15\70"+
    "\1\u023e\17\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\15\70\1\370\17\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\3\70\1\u023f\31\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\15\70\1\u0240\17\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\6\70"+
    "\1\u0152\26\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\14\70\1\u0241\20\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\22\70\1\u0242\12\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\31\0\1\u0243\72\0\6\31"+
    "\1\u0244\26\31\2\0\2\31\3\150\2\31\1\0\1\31"+
    "\26\0\6\31\1\u0245\26\31\2\0\2\31\3\150\2\31"+
    "\1\0\1\31\26\0\1\u0246\34\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\1\u0247\34\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\20\70\1\u017d\14\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\23\70"+
    "\1\u017e\11\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\11\70\1\u0248\23\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\15\70\1\u0249\17\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\10\70\1\u024a\24\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\6\70"+
    "\1\u024b\26\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\1\u0174\34\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\14\70\1\u024c\20\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\1\u01e1\34\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\24\70\1\u024d\10\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\10\70"+
    "\1\u024d\24\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\22\70\1\u024e\12\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\13\70\1\u0173\21\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\2\70\1\u024f\32\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\6\70"+
    "\1\u019c\26\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\24\70\1\u0152\10\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\2\70\1\u0250\32\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\4\70\1\u0133\30\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\6\70"+
    "\1\u01b1\26\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\13\70\1\u0251\21\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\27\70\1\u017e\5\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\11\70\1\u0252\23\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\5\70"+
    "\1\u0253\27\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\10\70\1\u0254\24\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\6\70\1\u0255\26\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\14\70\1\u0133\20\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\6\70"+
    "\1\u0256\26\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\6\70\1\u0257\7\70\1\u0258\16\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\1\u0133\34\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\21\70\1\u0259"+
    "\13\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\24\70\1\u025a\10\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\21\70\1\u0148\13\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\17\70\1\u025b\15\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\14\70\1\u025c"+
    "\20\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\22\70\1\u0148\12\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\11\70\1\u025d\23\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\14\70\1\u017e\20\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\12\70\1\u017e"+
    "\22\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\15\70\1\u021e\17\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\3\70\1\u025e\31\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\6\70\1\u025f\26\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\12\70\1\u0260"+
    "\22\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\3\70\1\u0261\31\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\21\70\1\u0262\13\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\16\70\1\u0133\16\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\2\70\1\u0263"+
    "\32\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\1\u0264\34\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\15\70\1\u0265\17\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\21\70\1\u0266\13\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\2\70\1\u0267\32\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\11\70"+
    "\1\u0268\23\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\3\31\1\u0269\31\31\2\0\2\31\3\150\2\31"+
    "\1\0\1\31\26\0\3\70\1\u026a\31\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\12\70\1\u026b\22\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\22\70"+
    "\1\u026c\12\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\6\70\1\u023d\26\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\1\u026d\34\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\3\70\1\u019c\31\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\1\u026e\34\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\6\70"+
    "\1\u026f\26\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\11\70\1\u0139\23\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\4\70\1\u0270\4\70\1\u0271\23\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\1\70"+
    "\1\u01f2\33\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\7\70\1\u017e\25\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\6\70\1\u0272\26\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\1\u0273\34\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\2\70\1\u0274"+
    "\32\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\11\70\1\u01cf\23\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\1\70\1\u0275\33\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\11\70\1\u0276\23\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\6\70\1\u0277"+
    "\26\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\11\70\1\u0278\23\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\6\70\1\u0205\26\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\1\70\1\u022c\4\70\1\u0129"+
    "\26\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\6\70\1\u0279\26\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\7\70\1\u018b\25\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\6\70\1\u027a\26\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\2\70\1\u027b"+
    "\32\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\3\70\1\u027c\31\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\22\70\1\u027d\12\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\22\70\1\u027e\12\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\4\70\1\u027f"+
    "\30\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\14\70\1\u0280\20\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\21\70\1\u0281\13\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\22\70\1\u01b4\12\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\4\70\1\u0282"+
    "\5\70\1\u0283\22\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\4\70\1\u019c\30\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\3\31\1\u0284\31\31\2\0"+
    "\2\31\3\150\2\31\1\0\1\31\26\0\5\70\1\u021e"+
    "\27\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\1\70\1\u023d\33\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\12\70\1\u019e\22\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\12\70\1\u0285\22\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\20\70\1\u019c"+
    "\14\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\11\70\1\u0172\23\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\6\70\1\u0286\26\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\13\70\1\u0287\21\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\10\70\1\u0288"+
    "\24\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\12\70\1\u0289\22\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\25\70\1\u028a\7\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\1\70\1\u028b\33\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\13\70\1\u028c"+
    "\21\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\11\70\1\u028d\23\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\11\70\1\u028e\23\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\11\70\1\u028f\23\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\2\70\1\u0290"+
    "\32\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\4\70\1\u0291\30\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\2\70\1\u0292\32\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\16\70\1\u0293\16\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\12\70\1\u0294"+
    "\22\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\13\70\1\240\21\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\6\70\1\u0295\26\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\11\70\1\u0121\23\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\21\70\1\u0296"+
    "\13\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\22\70\1\u0297\12\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\14\70\1\u019c\20\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\26\70\1\304\6\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\20\70\1\u0298"+
    "\14\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\4\70\1\u018a\30\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\22\70\1\u0299\12\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\6\70\1\u0216\26\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\1\272\34\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\15\70"+
    "\1\220\17\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\24\70\1\u029a\10\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\21\70\1\u029b\13\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\1\70\1\u022c\33\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\24\70"+
    "\1\u029c\10\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\21\70\1\u029d\13\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\1\u029e\34\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\3\70\1\u029f\31\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\1\70\1\u02a0"+
    "\33\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\2\70\1\u02a1\32\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\15\70\1\u02a2\17\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\7\70\1\u02a3\25\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\5\70\1\304"+
    "\27\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\7\70\1\u02a4\25\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\1\u02a5\34\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\24\70\1\220\10\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\5\70\1\u02a6\27\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\20\70"+
    "\1\220\14\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\4\70\1\u0139\5\70\1\u0133\22\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\14\70\1\u02a7\20\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\2\70"+
    "\1\u02a8\32\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\6\70\1\u02a9\26\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\1\u02aa\34\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\16\70\1\u010e\16\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\6\70\1\u0257"+
    "\26\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\12\70\1\u029d\22\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\13\70\1\u02ab\21\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\11\70\1\u02ac\23\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\10\70\1\u02ad"+
    "\24\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\7\70\1\u02ae\25\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\4\70\1\u02af\30\70\2\0\2\70\3\0"+
    "\2\70\1\0\1\70\26\0\14\70\1\u02b0\20\70\2\0"+
    "\2\70\3\0\2\70\1\0\1\70\26\0\13\70\1\u02a5"+
    "\21\70\2\0\2\70\3\0\2\70\1\0\1\70\26\0"+
    "\21\70\1\u02b1\13\70\2\0\2\70\3\0\2\70\1\0"+
    "\1\70\26\0\1\301\34\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\13\70\1\u02b2\21\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\6\70\1\u02b3\26\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\3\70"+
    "\1\u02b4\31\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\23\70\1\u0121\11\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\26\0\3\70\1\u01fb\31\70\2\0\2\70"+
    "\3\0\2\70\1\0\1\70\26\0\13\70\1\u02b5\21\70"+
    "\2\0\2\70\3\0\2\70\1\0\1\70\26\0\14\70"+
    "\1\u02b6\20\70\2\0\2\70\3\0\2\70\1\0\1\70"+
    "\26\0\13\70\1\u01ef\21\70\2\0\2\70\3\0\2\70"+
    "\1\0\1\70\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[38688];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\10\0\6\1\1\11\1\1\1\11\3\1\2\11"+
    "\17\1\2\11\2\1\1\11\2\1\1\11\4\1\3\11"+
    "\1\1\1\11\2\1\2\11\1\1\1\11\5\1\1\11"+
    "\27\1\1\11\2\1\3\0\2\11\2\0\1\1\1\11"+
    "\1\1\1\11\12\1\2\0\2\11\1\1\1\0\10\11"+
    "\2\1\1\0\1\11\7\0\1\11\114\1\3\11\1\0"+
    "\2\11\1\0\1\11\12\1\1\0\2\11\1\0\1\11"+
    "\1\0\1\11\141\1\1\11\1\0\10\1\1\11\135\1"+
    "\1\0\114\1\1\0\72\1\1\11\163\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[694];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private final Deque<Integer> lexStateStack = new ArrayDeque<Integer>();

    public AntlersLexer() {
        this((java.io.Reader)null);
    }

    private void pushState(int state) {
      lexStateStack.push(yystate());
      yybegin(state);
    }

    private void popState() {
      if (lexStateStack.isEmpty()) {
          yybegin(YYINITIAL);
      } else {
          yybegin(lexStateStack.pop());
      }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AntlersLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return OUTER_CONTENT;
            } 
            // fall through
          case 78: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 79: break;
          case 3: 
            { yybegin(YYINITIAL); return OUTER_CONTENT;
            } 
            // fall through
          case 80: break;
          case 4: 
            { return T_AT;
            } 
            // fall through
          case 81: break;
          case 5: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 82: break;
          case 6: 
            { return T_LEFT_BRACE;
            } 
            // fall through
          case 83: break;
          case 7: 
            { return T_RIGHT_BRACE;
            } 
            // fall through
          case 84: break;
          case 8: 
            { return T_SLASH;
            } 
            // fall through
          case 85: break;
          case 9: 
            { return T_OP_ASSIGN;
            } 
            // fall through
          case 86: break;
          case 10: 
            { pushState(SINGLE_STRING); return T_STRING_START;
            } 
            // fall through
          case 87: break;
          case 11: 
            { pushState(DOUBLE_STRING); return T_STRING_START;
            } 
            // fall through
          case 88: break;
          case 12: 
            { return T_IDENTIFIER;
            } 
            // fall through
          case 89: break;
          case 13: 
            { return T_INTEGER_NUMBER;
            } 
            // fall through
          case 90: break;
          case 14: 
            { pushState(MODIFIER_LIST); return T_PIPE;
            } 
            // fall through
          case 91: break;
          case 15: 
            { return T_OP_MINUS;
            } 
            // fall through
          case 92: break;
          case 16: 
            { return T_COLON;
            } 
            // fall through
          case 93: break;
          case 17: 
            { return T_LEFT_BRACKET;
            } 
            // fall through
          case 94: break;
          case 18: 
            { return T_OP_PLUS;
            } 
            // fall through
          case 95: break;
          case 19: 
            { return T_OP_QUESTIONMARK;
            } 
            // fall through
          case 96: break;
          case 20: 
            { return T_COMMA;
            } 
            // fall through
          case 97: break;
          case 21: 
            { return T_OP_GT;
            } 
            // fall through
          case 98: break;
          case 22: 
            { return T_OP_MUL;
            } 
            // fall through
          case 99: break;
          case 23: 
            { return T_OP_MOD;
            } 
            // fall through
          case 100: break;
          case 24: 
            { return T_OP_EXCLAMATION_MARK;
            } 
            // fall through
          case 101: break;
          case 25: 
            { return T_LP;
            } 
            // fall through
          case 102: break;
          case 26: 
            { return T_RP;
            } 
            // fall through
          case 103: break;
          case 27: 
            { return T_RIGHT_BRACKET;
            } 
            // fall through
          case 104: break;
          case 28: 
            { return T_OP_LT;
            } 
            // fall through
          case 105: break;
          case 29: 
            { yypushback(1);  // cancel unexpected char
                                  popState();     // and try to parse it again in <IN_ANTLERS>
            } 
            // fall through
          case 106: break;
          case 30: 
            { return T_DOT;
            } 
            // fall through
          case 107: break;
          case 31: 
            { popState(); return T_STRING_END;
            } 
            // fall through
          case 108: break;
          case 32: 
            { yypushback(1);  // cancel unexpected char
                           popState();     // and try to parse it again in <IN_ANTLERS>
            } 
            // fall through
          case 109: break;
          case 33: 
            { return T_PIPE;
            } 
            // fall through
          case 110: break;
          case 34: 
            { pushState(ANTLERS_NODE); return T_LD;
            } 
            // fall through
          case 111: break;
          case 35: 
            { popState(); return T_RD;
            } 
            // fall through
          case 112: break;
          case 36: 
            { return T_OP_SELF_ASSIGN_DIV;
            } 
            // fall through
          case 113: break;
          case 37: 
            { return T_OP_EQ;
            } 
            // fall through
          case 114: break;
          case 38: 
            { return T_OP_ARROW;
            } 
            // fall through
          case 115: break;
          case 39: 
            { yypushback(yylength()); pushState(PROPERTY_ACCESS);
            } 
            // fall through
          case 116: break;
          case 40: 
            { return T_IF;
            } 
            // fall through
          case 117: break;
          case 41: 
            { return T_OP_OR;
            } 
            // fall through
          case 118: break;
          case 42: 
            { return T_OP_SELF_ASSIGN_SUB;
            } 
            // fall through
          case 119: break;
          case 43: 
            { return T_FLOAT_NUMBER;
            } 
            // fall through
          case 120: break;
          case 44: 
            { return T_OP_SELF_ASSIGN_ADD;
            } 
            // fall through
          case 121: break;
          case 45: 
            { return T_OP_GATEKEEPER;
            } 
            // fall through
          case 122: break;
          case 46: 
            { return T_OP_NULL_COALESCENCE;
            } 
            // fall through
          case 123: break;
          case 47: 
            { return T_OP_AND;
            } 
            // fall through
          case 124: break;
          case 48: 
            { return T_OP_GTE;
            } 
            // fall through
          case 125: break;
          case 49: 
            { return T_OP_SELF_ASSIGN_MUL;
            } 
            // fall through
          case 126: break;
          case 50: 
            { return T_OP_POW;
            } 
            // fall through
          case 127: break;
          case 51: 
            { return T_OP_SELF_ASSIGN_MOD;
            } 
            // fall through
          case 128: break;
          case 52: 
            { return T_OP_NEQ;
            } 
            // fall through
          case 129: break;
          case 53: 
            { return T_OP_LTE;
            } 
            // fall through
          case 130: break;
          case 54: 
            { yypushback(1); return T_STRING_CONTENT;
            } 
            // fall through
          case 131: break;
          case 55: 
            { yybegin(YYINITIAL); return T_RD;
            } 
            // fall through
          case 132: break;
          case 56: 
            { return T_MODIFIER;
            } 
            // fall through
          case 133: break;
          case 57: 
            { yypushback(yylength() - 3); pushState(ANTLERS_COMMENT); return T_COMMENT_OPEN;
            } 
            // fall through
          case 134: break;
          case 58: 
            { pushState(PHP_ECHO); return T_PHP_ECHO_OPEN;
            } 
            // fall through
          case 135: break;
          case 59: 
            { pushState(PHP_RAW); return T_PHP_RAW_OPEN;
            } 
            // fall through
          case 136: break;
          case 60: 
            { popState(); return T_COMMENT_CLOSE;
            } 
            // fall through
          case 137: break;
          case 61: 
            { return T_END_IF;
            } 
            // fall through
          case 138: break;
          case 62: 
            { return T_OP_IDENT;
            } 
            // fall through
          case 139: break;
          case 63: 
            { return T_OP_XOR;
            } 
            // fall through
          case 140: break;
          case 64: 
            { return T_OP_NOT_IDENT;
            } 
            // fall through
          case 141: break;
          case 65: 
            { return T_OP_SPACESHIP;
            } 
            // fall through
          case 142: break;
          case 66: 
            { popState(); return T_PHP_ECHO_CLOSE;
            } 
            // fall through
          case 143: break;
          case 67: 
            { popState(); return T_PHP_RAW_CLOSE;
            } 
            // fall through
          case 144: break;
          case 68: 
            { yypushback(3); return T_COMMENT_TEXT;
            } 
            // fall through
          case 145: break;
          case 69: 
            { return T_ELSE;
            } 
            // fall through
          case 146: break;
          case 70: 
            { return T_TRUE;
            } 
            // fall through
          case 147: break;
          case 71: 
            { yypushback(3); return T_PHP_CONTENT;
            } 
            // fall through
          case 148: break;
          case 72: 
            { return T_FALSE;
            } 
            // fall through
          case 149: break;
          case 73: 
            { return T_SWITCH;
            } 
            // fall through
          case 150: break;
          case 74: 
            { return T_ELSE_IF;
            } 
            // fall through
          case 151: break;
          case 75: 
            { return T_UNLESS;
            } 
            // fall through
          case 152: break;
          case 76: 
            { return T_END_UNLESS;
            } 
            // fall through
          case 153: break;
          case 77: 
            { return T_NOPARSE;
            } 
            // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
